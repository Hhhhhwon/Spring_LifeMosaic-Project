<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.itwill.project.repository.SettingDao">

<select id="selectBySettingUser" resultType="SettingUser">
	 	 select * from users where user_id = #{user_id}
	 </select>
	 
	 <select id="selectNickname" resultType="SettingUser">
	 	select * from users where nickname = #{nickname}
	 </select>
	 
	 <update id="updateProfileUrl">
	 	update users set profile_url =#{profile_url} where user_id = #{user_id}
	 </update>
	 
	 <update id="updateBasicProfileImg">
	 	update users set profile_url ='default.png' where user_id = #{user_id}
	 </update>
	 
	 <update id="updateNickname">
	 	update users set nickname = #{nickname} where user_id = #{user_id} 
	 </update>
	 <!-- 전체 댓글 검색 -->
	 <select id="selectMyComment" resultType="MyCommentListItem">
  SELECT
    p.title AS "post_title",
    p.user_id AS "post_user_id",
    TO_CHAR( p.created_time,'MM.dd HH:mm') AS "post_created_time",
    p.view_count AS "post_view_count",
    u.profile_url AS "post_user_profile_url",
    u.nickname AS "post_nickname",
    sc.sub_category_name AS "post_subcategory",
    p.post_id,
    CASE WHEN LENGTH(c.comment_content) > 20 THEN SUBSTR( c.comment_content ,0,20) || ' ...'ELSE  c.comment_content END AS "comment_content",
    TO_CHAR( c.comment_created_time,'MM.dd HH:mm')  AS "comment_created_time",
    COALESCE(pl.like_point,0) AS "post_like_count",
	(
	  SELECT COUNT(*) FROM COMMENTS WHERE POST_ID = P.POST_ID
	    ) AS "comment_count"
	FROM
	    POSTS P
	JOIN
	    COMMENTS C ON C.POST_ID = P.POST_ID
	LEFT JOIN
	    POST_LIKE PL ON PL.POST_ID = P.POST_ID
	LEFT JOIN
	    USERS U ON P.USER_ID = U.USER_ID
	left join
    sub_category sc on p.sub_category_id = sc.sub_category_id
	WHERE
	    C.USER_ID = #{user_id}
	ORDER BY
	     C.COMMENT_CREATED_TIME desc
	 </select>
	 
		<!-- 페이징 기능을 위한 댓글 검색 --> 
	  <select id="selectByMyCommentByPaging" resultType="MyCommentListItemByPaging">
SELECT *
FROM (
    SELECT
        rownum AS "row_num",
        "post_title",
        "post_user_id",
        "post_created_time",
        "post_view_count",
        "post_user_profile_url",
        "post_nickname",
        "post_subcategory",
        "post_subcategory_id",
        "post_id",
        "comment_content",
        "comment_created_time",
        "post_like_count",
        "comment_count"
    FROM (
        SELECT
            p.title AS "post_title",
            p.user_id AS "post_user_id",
            TO_CHAR(p.created_time, 'YYYY.MM.dd HH:mm') AS "post_created_time",
            p.view_count AS "post_view_count",
            u.profile_url AS "post_user_profile_url",
            u.nickname AS "post_nickname",
            sc.sub_category_name AS "post_subcategory",
            p.sub_category_id as "post_subcategory_id",
            p.post_id AS "post_id",
            CASE WHEN LENGTH(c.comment_content) > 20 THEN SUBSTR(c.comment_content, 0, 20) || ' ...' ELSE c.comment_content END AS "comment_content",
            TO_CHAR(c.comment_created_time, 'YYYY.MM.dd HH:mm') AS "comment_created_time",
            COALESCE(pl.like_point, 0) AS "post_like_count",
            (SELECT COUNT(*) FROM COMMENTS WHERE POST_ID = p.POST_ID) AS "comment_count"
        FROM
            POSTS p
            JOIN COMMENTS c ON c.POST_ID = p.POST_ID
            LEFT JOIN POST_LIKE pl ON pl.POST_ID = p.POST_ID
            LEFT JOIN USERS u ON p.USER_ID = u.USER_ID
            LEFT JOIN sub_category sc ON p.sub_category_id = sc.sub_category_id
        WHERE
            c.USER_ID = #{user_id}
        ORDER BY
            c.COMMENT_CREATED_TIME DESC
		    )
		)
		WHERE "row_num" BETWEEN #{startNum} AND #{endNum}
	 
	 </select>
	 <!-- 북마크 페이지(개수만 가져오기) -->
	 <select id="selectBookmarkTotalPages" resultType="Integer">
	  select count(*) from bookmark where user_id =#{user_id}
	 </select>
	 <!-- 북마크 페이지(페이징 기능을 위한 sql문) -->
	 <select id="selectBookmarkByPaging" resultType="MyBookmarkListItemByPaging">
	 	SELECT *
			FROM (
			 select
				ROWNUM as "row_num",
				"bookmark_created_time",
				"post_id",
				"post_user_id",
				"profile_url",
				"post_user_nickname",
				"post_title",
				"post_content",
				 "post_time",
				 "post_sub_category_id",
				  "post_sub_category_name",
				  "post_view_count", 
				   "post_like_count",
				  "post_comment_count"
				  from (
			    SELECT 
			    	
			        TO_CHAR(b.created_time, 'YYYY.MM.dd HH:mm') AS "bookmark_created_time",
			        b.post_id as "post_id",
			        p.user_id AS "post_user_id",
			        u.profile_url AS "profile_url",
			        u.nickname AS "post_user_nickname",
			        p.title AS "post_title",
			        CASE WHEN LENGTH(p.content) > 50 THEN SUBSTR(p.content, 0, 50) || ' ...' ELSE p.content END AS "post_content",
			        TO_CHAR(p.modified_time, 'YYYY.MM.dd HH:mm') AS "post_time",
			        p.sub_category_id AS "post_sub_category_id",
			        sc.sub_category_name AS "post_sub_category_name", 
			        p.view_count AS "post_view_count",
			        COALESCE(pl.like_point, 0) AS "post_like_count",
			        (SELECT COUNT(*) FROM comments WHERE post_id = p.post_id) AS "post_comment_count"
			        
			    FROM 
			        bookmark b
			    JOIN 
			        posts p ON b.post_id = p.post_id
			    LEFT JOIN 
			        users u ON u.user_id = p.user_id
			    LEFT JOIN 
			        post_like pl ON pl.post_id = p.post_id 
			    LEFT JOIN 
			        sub_category sc ON sc.sub_category_id = p.sub_category_id
			    WHERE 
			        b.user_id = #{user_id}
			    ORDER BY 
			        b.created_time DESC
			)
			)
			WHERE 
			    "row_num" BETWEEN #{startNum} AND #{endNum}
	 </select>
	 </mapper>